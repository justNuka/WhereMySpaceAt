{"version":3,"file":"index.js","mappings":"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","sources":["webpack://electron-wheremyspaceat/external node-commonjs \"worker_threads\"","webpack://electron-wheremyspaceat/external commonjs2 \"electron\"","webpack://electron-wheremyspaceat/external node-commonjs \"child_process\"","webpack://electron-wheremyspaceat/external node-commonjs \"os\"","webpack://electron-wheremyspaceat/external node-commonjs \"fs\"","webpack://electron-wheremyspaceat/external commonjs2 \"electron-squirrel-startup\"","webpack://electron-wheremyspaceat/external node-commonjs \"path\"","webpack://electron-wheremyspaceat/webpack/bootstrap","webpack://electron-wheremyspaceat/./src/main/main.js"],"sourcesContent":["module.exports = require(\"worker_threads\");","module.exports = require(\"electron\");","module.exports = require(\"child_process\");","module.exports = require(\"os\");","module.exports = require(\"fs\");","module.exports = require(\"electron-squirrel-startup\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { app, BrowserWindow, ipcMain, dialog, Menu } = require('electron');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst { Worker } = require('worker_threads');\nconst os = require('os');\nconst { shell } = require('electron');\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling\nif (require('electron-squirrel-startup')) {\n  app.quit();\n}\n\nlet mainWindow;\nlet scanWorker = null;\n\n// Détection de l'environnement et définition des chemins\nconst isDev = process.env.NODE_ENV === 'development' || !app.isPackaged;\nconst getPreloadPath = () => {\n  if (typeof MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY !== 'undefined') {\n    return MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY;\n  }\n  return path.join(__dirname, '../../workers/preload.js');\n};\n\nconst getRendererPath = () => {\n  if (typeof MAIN_WINDOW_WEBPACK_ENTRY !== 'undefined') {\n    return MAIN_WINDOW_WEBPACK_ENTRY;\n  }\n  // En mode dev, utiliser l'URL du serveur de développement ou le fichier HTML\n  if (isDev) {\n    return path.join(__dirname, '../../dist/index.html');\n  }\n  return path.join(__dirname, '../../dist/index.html');\n};\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    width: 1400,\n    height: 900,\n    minWidth: 1200,\n    minHeight: 700,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: getPreloadPath()\n    },\n    backgroundColor: '#1a1a2e',\n    show: false,\n    titleBarStyle: 'hiddenInset',\n    vibrancy: 'dark'\n  });\n\n  // Charger l'URL ou le fichier HTML selon l'environnement\n  const rendererPath = getRendererPath();\n  if (rendererPath.startsWith('http')) {\n    mainWindow.loadURL(rendererPath);\n  } else {\n    mainWindow.loadFile(rendererPath);\n  }\n\n  // mainWindow.webContents.openDevTools();\n\n  mainWindow.once('ready-to-show', () => {\n    mainWindow.show();\n  });\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n    if (scanWorker) {\n      scanWorker.terminate();\n      scanWorker = null;\n    }\n  });\n\n  // Supprimer la barre de menu par défaut\n  Menu.setApplicationMenu(null);\n}\n\napp.whenReady().then(createWindow);\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// Gestion de la sélection de dossier/disque\nipcMain.handle('select-folder', async () => {\n  const result = await dialog.showOpenDialog(mainWindow, {\n    properties: ['openDirectory'],\n    title: 'Sélectionner un dossier à analyser'\n  });\n  \n  if (!result.canceled) {\n    return result.filePaths[0];\n  }\n  return null;\n});\n\n// Gestion de la sélection de disque avec prescan\nipcMain.handle('get-drives', async () => {\n  const drives = [];\n  \n  if (process.platform === 'win32') {\n    // Windows - énumérer les lecteurs\n    for (let i = 65; i <= 90; i++) {\n      const drive = String.fromCharCode(i) + ':\\\\';\n      try {\n        await fs.access(drive);\n        const stats = await fs.stat(drive);\n        \n        // Essayer d'obtenir des infos sur l'espace disque (Windows)\n        let totalSize = null;\n        let freeSpace = null;\n        try {\n          // Note: Cette partie nécessiterait une librairie native pour Windows\n          // Pour l'instant on utilise juste les stats de base\n        } catch (e) {\n          // Ignore\n        }\n        \n        drives.push({\n          path: drive,\n          name: `Disque ${String.fromCharCode(i)}:`,\n          type: 'drive',\n          totalSize,\n          freeSpace,\n          platform: 'windows'\n        });\n      } catch (e) {\n        // Drive non accessible\n      }\n    }\n    \n    // Ajouter des dossiers utilisateur recommandés\n    try {\n      const userHome = os.homedir();\n      const homeStats = await fs.stat(userHome);\n      drives.push({\n        path: userHome,\n        name: `Dossier utilisateur (${path.basename(userHome)})`,\n        type: 'folder',\n        totalSize: null,\n        freeSpace: null,\n        platform: 'windows'\n      });\n      \n      // Dossiers communs dans le profil utilisateur\n      const commonFolders = [\n        { folder: 'Documents', name: 'Documents' },\n        { folder: 'Downloads', name: 'Téléchargements' },\n        { folder: 'Pictures', name: 'Images' },\n        { folder: 'Videos', name: 'Vidéos' },\n        { folder: 'Music', name: 'Musique' }\n      ];\n      \n      for (const { folder, name } of commonFolders) {\n        const folderPath = path.join(userHome, folder);\n        try {\n          await fs.access(folderPath);\n          drives.push({\n            path: folderPath,\n            name: `${name}`,\n            type: 'folder',\n            totalSize: null,\n            freeSpace: null,\n            platform: 'windows'\n          });\n        } catch (e) {\n          // Dossier non accessible ou inexistant\n        }\n      }\n    } catch (e) {\n      // Ignore\n    }\n  } else {\n    // Unix/Linux/macOS\n    try {\n      // Prescan du disque racine\n      const rootStats = await fs.stat('/');\n      drives.push({\n        path: '/',\n        name: 'Racine système (/)',\n        type: 'drive',\n        totalSize: null, // À implémenter avec statvfs si nécessaire\n        freeSpace: null,\n        platform: process.platform\n      });\n    } catch (e) {\n      // Ignore\n    }\n    \n    try {\n      const homeDir = os.homedir();\n      const homeStats = await fs.stat(homeDir);\n      drives.push({\n        path: homeDir,\n        name: `Dossier utilisateur (${path.basename(homeDir)})`,\n        type: 'folder',\n        totalSize: null,\n        freeSpace: null,\n        platform: process.platform\n      });\n    } catch (e) {\n      // Ignore\n    }\n    \n    // Ajouter d'autres points de montage courants\n    const commonMounts = ['/mnt', '/media', '/Volumes'];\n    for (const mount of commonMounts) {\n      try {\n        const entries = await fs.readdir(mount);\n        for (const entry of entries) {\n          const fullPath = path.join(mount, entry);\n          try {\n            const stats = await fs.stat(fullPath);\n            if (stats.isDirectory()) {\n              drives.push({\n                path: fullPath,\n                name: `${entry} (${mount})`,\n                type: 'mount',\n                totalSize: null,\n                freeSpace: null,\n                platform: process.platform\n              });\n            }\n          } catch (e) {\n            // Ignore inaccessible mounts\n          }\n        }\n      } catch (e) {\n        // Mount point doesn't exist\n      }\n    }\n  }\n  \n  return drives;\n});\n\n// Nouveau handler pour le prescan des disques\nipcMain.handle('prescan-drives', async () => {\n  console.log('Starting drive prescan...');\n  const drives = [];\n  \n  if (process.platform === 'win32') {\n    // Windows - prescan des lecteurs\n    for (let i = 65; i <= 90; i++) {\n      const drive = String.fromCharCode(i) + ':\\\\';\n      try {\n        await fs.access(drive);\n        \n        // Compter rapidement quelques éléments pour avoir une idée\n        let estimatedItems = 0;\n        let estimatedSize = 0;\n        try {\n          const entries = await fs.readdir(drive);\n          estimatedItems = entries.length;\n          \n          // Échantillonner quelques fichiers pour estimation\n          for (let j = 0; j < Math.min(5, entries.length); j++) {\n            try {\n              const filePath = path.join(drive, entries[j]);\n              const stats = await fs.stat(filePath);\n              if (stats.isFile()) {\n                estimatedSize += stats.size;\n              }\n            } catch (e) {\n              // Ignore inaccessible files\n            }\n          }\n        } catch (e) {\n          // Ignore scan errors\n        }\n        \n        drives.push({\n          path: drive,\n          name: `Disque ${String.fromCharCode(i)}:`,\n          type: 'drive',\n          estimatedItems,\n          estimatedSize,\n          platform: 'windows',\n          accessible: true\n        });\n      } catch (e) {\n        // Drive non accessible\n        drives.push({\n          path: drive,\n          name: `Disque ${String.fromCharCode(i)}: (non accessible)`,\n          type: 'drive',\n          estimatedItems: 0,\n          estimatedSize: 0,\n          platform: 'windows',\n          accessible: false\n        });\n      }\n    }\n  } else {\n    // Unix/Linux/macOS - prescan\n    const mountsToCheck = [\n      { path: '/', name: 'Racine système (/)' },\n      { path: os.homedir(), name: `Dossier utilisateur (${path.basename(os.homedir())})` }\n    ];\n    \n    // Ajouter les points de montage détectés\n    try {\n      const volumesEntries = await fs.readdir('/Volumes');\n      for (const entry of volumesEntries) {\n        const fullPath = path.join('/Volumes', entry);\n        mountsToCheck.push({\n          path: fullPath,\n          name: `${entry} (/Volumes)`\n        });\n      }\n    } catch (e) {\n      // /Volumes n'existe pas ou n'est pas accessible\n    }\n    \n    for (const mount of mountsToCheck) {\n      try {\n        await fs.access(mount.path);\n        \n        // Prescan rapide\n        let estimatedItems = 0;\n        let estimatedSize = 0;\n        try {\n          const entries = await fs.readdir(mount.path);\n          estimatedItems = entries.length;\n          \n          // Échantillonner quelques fichiers\n          for (let j = 0; j < Math.min(5, entries.length); j++) {\n            try {\n              const filePath = path.join(mount.path, entries[j]);\n              const stats = await fs.stat(filePath);\n              if (stats.isFile()) {\n                estimatedSize += stats.size;\n              }\n            } catch (e) {\n              // Ignore inaccessible files\n            }\n          }\n        } catch (e) {\n          // Ignore scan errors\n        }\n        \n        drives.push({\n          path: mount.path,\n          name: mount.name,\n          type: mount.path === '/' ? 'drive' : 'mount',\n          estimatedItems,\n          estimatedSize,\n          platform: process.platform,\n          accessible: true\n        });\n      } catch (e) {\n        drives.push({\n          path: mount.path,\n          name: `${mount.name} (non accessible)`,\n          type: mount.path === '/' ? 'drive' : 'mount',\n          estimatedItems: 0,\n          estimatedSize: 0,\n          platform: process.platform,\n          accessible: false\n        });\n      }\n    }\n  }\n  \n  console.log(`Drive prescan completed. Found ${drives.length} drives.`);\n  return drives;\n});\n\n// Démarrer le scan\nipcMain.handle('start-scan', async (event, targetPath, scanType) => {\n  console.log(`Starting scan: ${targetPath} (${scanType})`);\n  \n  return new Promise((resolve, reject) => {\n    if (scanWorker) {\n      scanWorker.terminate();\n    }\n\n    // Chemin vers le worker selon l'environnement\n    const workerPath = app.isPackaged \n      ? path.join(process.resourcesPath, 'workers', 'scanner.js')\n      : path.join(__dirname, '..', '..', 'workers', 'scanner.js');\n      \n    scanWorker = new Worker(workerPath, {\n      workerData: { targetPath, scanType }\n    });\n\n    scanWorker.on('message', (data) => {\n      if (data.type === 'progress') {\n        mainWindow.webContents.send('scan-progress', data);\n      } else if (data.type === 'complete') {\n        console.log('Scan completed successfully');\n        resolve({ result: data.result, stats: data.stats });\n        scanWorker = null;\n      } else if (data.type === 'error') {\n        console.error('Scan error:', data.message);\n        reject(new Error(data.message));\n        scanWorker = null;\n      } else if (data.type === 'log') {\n        mainWindow.webContents.send('scan-log', data);\n      }\n    });\n\n    scanWorker.on('error', (error) => {\n      console.error('Worker error:', error);\n      reject(error);\n      scanWorker = null;\n    });\n  });\n});\n\n// Arrêter le scan\nipcMain.handle('stop-scan', async () => {\n  if (scanWorker) {\n    scanWorker.terminate();\n    scanWorker = null;\n    return true;\n  }\n  return false;\n});\n\n// Fonctions de nettoyage\nipcMain.handle('scan-cleanup-items', async () => {\n  // Mock data pour l'instant - à implémenter plus tard\n  return [\n    {\n      id: 'temp',\n      name: 'Fichiers temporaires',\n      description: 'Fichiers %temp%, cache navigateur, logs temporaires',\n      size: 2469396480, // 2.3 GB\n      fileCount: 4567,\n      type: 'temp',\n      progress: 75\n    },\n    {\n      id: 'duplicates',\n      name: 'Fichiers en double',\n      description: 'Copies identiques de fichiers existants',\n      size: 1932735283, // 1.8 GB\n      fileCount: 892,\n      type: 'duplicates',\n      progress: 45\n    },\n    {\n      id: 'trash',\n      name: 'Corbeille',\n      description: 'Fichiers supprimés mais non définitivement effacés',\n      size: 897581056, // 856 MB\n      fileCount: 234,\n      type: 'trash',\n      progress: 30\n    },\n    {\n      id: 'old-downloads',\n      name: 'Anciens téléchargements',\n      description: 'Fichiers téléchargés il y a plus de 30 jours',\n      size: 3435973837, // 3.2 GB\n      fileCount: 156,\n      type: 'old-downloads',\n      progress: 60\n    }\n  ];\n});\n\nipcMain.handle('cleanup-files', async (event, selectedItems) => {\n  // Mock cleanup process - à implémenter plus tard\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        freedSpace: selectedItems.reduce((sum, item) => sum + item.size, 0),\n        cleanedFiles: selectedItems.reduce((sum, item) => sum + item.fileCount, 0)\n      });\n    }, 3000);\n  });\n});\n\n// Handler pour relancer avec les droits admin\nipcMain.handle('relaunch-as-admin', async () => {\n  try {\n    if (process.platform === 'win32') {\n      // Windows - utiliser PowerShell pour relancer avec UAC\n      const { spawn } = require('child_process');\n      const appPath = process.execPath;\n      \n      // Utiliser PowerShell Start-Process avec -Verb RunAs pour déclencher UAC\n      spawn('powershell', [\n        'Start-Process',\n        `\"${appPath}\"`,\n        '-Verb',\n        'RunAs'\n      ], {\n        detached: true,\n        stdio: 'ignore'\n      });\n      \n      // Fermer l'instance actuelle\n      app.quit();\n      return { success: true };\n    } else if (process.platform === 'darwin') {\n      // macOS - utiliser osascript pour demander l'authentification admin\n      const { spawn } = require('child_process');\n      const appPath = process.execPath;\n      \n      spawn('osascript', [\n        '-e',\n        `do shell script \"${appPath}\" with administrator privileges`\n      ], {\n        detached: true,\n        stdio: 'ignore'\n      });\n      \n      app.quit();\n      return { success: true };\n    } else {\n      // Linux - utiliser sudo/pkexec\n      const { spawn } = require('child_process');\n      const appPath = process.execPath;\n      \n      // Essayer avec pkexec d'abord, puis sudo\n      try {\n        spawn('pkexec', [appPath], {\n          detached: true,\n          stdio: 'ignore'\n        });\n      } catch (e) {\n        spawn('sudo', [appPath], {\n          detached: true,\n          stdio: 'ignore'\n        });\n      }\n      \n      app.quit();\n      return { success: true };\n    }\n  } catch (error) {\n    console.error('Failed to relaunch as admin:', error);\n    return { \n      success: false, \n      error: error.message \n    };\n  }\n});\n\n// Détecter si l'app s'exécute avec des privilèges élevés\nipcMain.handle('check-admin-privileges', async () => {\n  try {\n    if (process.platform === 'win32') {\n      // Windows - vérifier si on est admin\n      const { exec } = require('child_process');\n      return new Promise((resolve) => {\n        exec('net session >nul 2>&1', (error) => {\n          resolve({ \n            isAdmin: !error,\n            platform: 'windows'\n          });\n        });\n      });\n    } else {\n      // Unix-like - vérifier si on est root\n      const isRoot = process.getuid && process.getuid() === 0;\n      return { \n        isAdmin: isRoot,\n        platform: process.platform\n      };\n    }\n  } catch (error) {\n    return { \n      isAdmin: false,\n      platform: process.platform,\n      error: error.message\n    };\n  }\n});"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","mainWindow","_require","app","BrowserWindow","ipcMain","dialog","Menu","path","fs","Worker","os","shell","quit","scanWorker","createWindow","width","height","minWidth","minHeight","webPreferences","nodeIntegration","contextIsolation","preload","MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY","join","__dirname","backgroundColor","show","titleBarStyle","vibrancy","rendererPath","MAIN_WINDOW_WEBPACK_ENTRY","startsWith","loadURL","loadFile","once","on","terminate","setApplicationMenu","isPackaged","whenReady","process","platform","getAllWindows","handle","_callee","result","_context","showOpenDialog","properties","title","canceled","filePaths","_callee2","drives","drive","userHome","_i","_commonFolders","_commonFolders$_i","folder","name","folderPath","homeDir","_i2","_commonMounts","mount","entries","_iterator","_step","entry","fullPath","_t7","_context2","String","fromCharCode","access","stat","push","concat","type","totalSize","freeSpace","homedir","basename","readdir","_createForOfIteratorHelper","s","isDirectory","_callee3","estimatedItems","estimatedSize","j","filePath","stats","mountsToCheck","volumesEntries","_iterator2","_step2","_i3","_mountsToCheck","_estimatedItems","_estimatedSize","_entries","_j","_filePath","_stats2","_context3","console","log","Math","min","isFile","size","accessible","err","_ref4","_callee4","event","targetPath","scanType","_context4","reject","workerPath","resourcesPath","workerData","data","webContents","send","error","message","Error","_x","_x2","_x3","_callee5","_context5","_callee6","_context6","id","description","fileCount","progress","_ref7","_callee7","selectedItems","_context7","setTimeout","success","freedSpace","reduce","sum","item","cleanedFiles","_x4","_x5","_callee8","_require4","spawn","appPath","_require5","_spawn","_appPath","_require6","_spawn2","_appPath2","_t14","_context8","execPath","detached","stdio","_callee9","_require7","exec","isRoot","_t15","_context9","isAdmin","getuid"],"sourceRoot":""}