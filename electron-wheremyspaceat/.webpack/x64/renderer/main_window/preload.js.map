{"version":3,"file":"main_window/preload.js","mappings":";;;;;;;;;;AAAA,qC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,IAAAA,QAAA,GAAuCC,mBAAO,CAAC,0BAAU,CAAC;EAAlDC,aAAa,GAAAF,QAAA,CAAbE,aAAa;EAAEC,WAAW,GAAAH,QAAA,CAAXG,WAAW;AAElCD,aAAa,CAACE,iBAAiB,CAAC,aAAa,EAAE;EAC7C;EACAC,YAAY,EAAE,SAAdA,YAAYA,CAAA;IAAA,OAAQF,WAAW,CAACG,MAAM,CAAC,eAAe,CAAC;EAAA;EAEvD;EACAC,SAAS,EAAE,SAAXA,SAASA,CAAA;IAAA,OAAQJ,WAAW,CAACG,MAAM,CAAC,YAAY,CAAC;EAAA;EAEjD;EACAE,aAAa,EAAE,SAAfA,aAAaA,CAAA;IAAA,OAAQL,WAAW,CAACG,MAAM,CAAC,gBAAgB,CAAC;EAAA;EAEzD;EACAG,SAAS,EAAE,SAAXA,SAASA,CAAGC,UAAU,EAAEC,QAAQ;IAAA,OAAKR,WAAW,CAACG,MAAM,CAAC,YAAY,EAAEI,UAAU,EAAEC,QAAQ,CAAC;EAAA;EAC3FC,QAAQ,EAAE,SAAVA,QAAQA,CAAA;IAAA,OAAQT,WAAW,CAACG,MAAM,CAAC,WAAW,CAAC;EAAA;EAE/C;EACAO,oBAAoB,EAAE,SAAtBA,oBAAoBA,CAAA;IAAA,OAAQV,WAAW,CAACG,MAAM,CAAC,wBAAwB,CAAC;EAAA;EACxEQ,eAAe,EAAE,SAAjBA,eAAeA,CAAA;IAAA,OAAQX,WAAW,CAACG,MAAM,CAAC,mBAAmB,CAAC;EAAA;EAE9D;EACAS,gBAAgB,EAAE,SAAlBA,gBAAgBA,CAAA;IAAA,OAAQZ,WAAW,CAACG,MAAM,CAAC,oBAAoB,CAAC;EAAA;EAChEU,YAAY,EAAE,SAAdA,YAAYA,CAAGC,aAAa;IAAA,OAAKd,WAAW,CAACG,MAAM,CAAC,eAAe,EAAEW,aAAa,CAAC;EAAA;EAEnF;EACAC,cAAc,EAAE,SAAhBA,cAAcA,CAAGC,QAAQ,EAAK;IAC5BhB,WAAW,CAACiB,EAAE,CAAC,eAAe,EAAE,UAACC,KAAK,EAAEC,IAAI;MAAA,OAAKH,QAAQ,CAACG,IAAI,CAAC;IAAA,EAAC;EAClE,CAAC;EACDC,SAAS,EAAE,SAAXA,SAASA,CAAGJ,QAAQ,EAAK;IACvBhB,WAAW,CAACiB,EAAE,CAAC,UAAU,EAAE,UAACC,KAAK,EAAEC,IAAI;MAAA,OAAKH,QAAQ,CAACG,IAAI,CAAC;IAAA,EAAC;EAC7D,CAAC;EAED;EACAE,kBAAkB,EAAE,SAApBA,kBAAkBA,CAAGC,OAAO,EAAK;IAC/B,IAAIA,OAAO,EAAE;MACXtB,WAAW,CAACqB,kBAAkB,CAACC,OAAO,CAAC;IACzC,CAAC,MAAM;MACL;MACAtB,WAAW,CAACqB,kBAAkB,CAAC,eAAe,CAAC;MAC/CrB,WAAW,CAACqB,kBAAkB,CAAC,UAAU,CAAC;IAC5C;EACF,CAAC;EAED;EACAE,WAAW,EAAE,SAAbA,WAAWA,CAAA;IAAA,OAAQC,OAAO,CAACC,QAAQ;EAAA;AACrC,CAAC,CAAC,C","sources":["webpack://electron-wheremyspaceat/external commonjs2 \"electron\"","webpack://electron-wheremyspaceat/webpack/bootstrap","webpack://electron-wheremyspaceat/./workers/preload.js"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // Sélection de dossier\n  selectFolder: () => ipcRenderer.invoke('select-folder'),\n  \n  // Obtenir la liste des disques/lecteurs\n  getDrives: () => ipcRenderer.invoke('get-drives'),\n  \n  // Prescan des disques au démarrage\n  prescanDrives: () => ipcRenderer.invoke('prescan-drives'),\n  \n  // Gestion du scan\n  startScan: (targetPath, scanType) => ipcRenderer.invoke('start-scan', targetPath, scanType),\n  stopScan: () => ipcRenderer.invoke('stop-scan'),\n  \n  // Permissions et droits admin\n  checkAdminPrivileges: () => ipcRenderer.invoke('check-admin-privileges'),\n  relaunchAsAdmin: () => ipcRenderer.invoke('relaunch-as-admin'),\n  \n  // Fonctions de nettoyage\n  scanCleanupItems: () => ipcRenderer.invoke('scan-cleanup-items'),\n  cleanupFiles: (selectedItems) => ipcRenderer.invoke('cleanup-files', selectedItems),\n  \n  // Event listeners pour les mises à jour en temps réel\n  onScanProgress: (callback) => {\n    ipcRenderer.on('scan-progress', (event, data) => callback(data));\n  },\n  onScanLog: (callback) => {\n    ipcRenderer.on('scan-log', (event, data) => callback(data));\n  },\n  \n  // Nettoyage des listeners\n  removeAllListeners: (channel) => {\n    if (channel) {\n      ipcRenderer.removeAllListeners(channel);\n    } else {\n      // Nettoyer tous les listeners si aucun channel spécifié\n      ipcRenderer.removeAllListeners('scan-progress');\n      ipcRenderer.removeAllListeners('scan-log');\n    }\n  },\n\n  // Get la plateforme\n  getPlatform: () => process.platform,\n});"],"names":["_require","require","contextBridge","ipcRenderer","exposeInMainWorld","selectFolder","invoke","getDrives","prescanDrives","startScan","targetPath","scanType","stopScan","checkAdminPrivileges","relaunchAsAdmin","scanCleanupItems","cleanupFiles","selectedItems","onScanProgress","callback","on","event","data","onScanLog","removeAllListeners","channel","getPlatform","process","platform"],"sourceRoot":""}